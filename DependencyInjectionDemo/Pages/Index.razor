@page "/"
@using DependencyInjectionDemo.Logic
@using Serilog
@using SerilogTimings
@inject IDemoLogic logic
@inject ILogger<Index> logger

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<h3> Value1: @logic.Value1 </h3>
<h3> Value2: @logic.Value2 </h3>

@code {
    protected override void OnInitialized()
    {
        logger.LogInformation("Inside of Ping");

        using (var op = Operation.Begin("Retrieving orders for {CustomerId}", 33))
        {
            op.Complete();
        }

        using (var op = Operation.Begin("Retrieving orders for {CustomerId}", 37))
        {
            op.Complete("Rows", 37);
        }

        using (Operation.Time("Operation of the Ping"))
        {
            Thread.Sleep(500);
        }

        using (Operation.Time("Operation of the Ping"))
        {
            logger.LogCritical("LogCritical serilog at {now}", DateTime.Now);

            logger.LogDebug("LogDebug serilog at {now}", DateTime.Now);

            logger.LogTrace("LogTrace serilog at {now}", DateTime.Now);

            logger.LogInformation("LogInformation serilog at {now}", DateTime.Now);

            logger.LogWarning("LogWarning serilog at {now}", DateTime.Now);

            logger.LogError("LogError serilog at {now}", DateTime.Now);

            logger.LogInformation("User name is {username} and age is {age}", "Saddam", 32);

            int count;
            try
            {
                for (count = 0; count <= 5; count++)
                {
                    if (count == 3)
                    {
                        logger.LogError("Random Exception logger");
                        throw new Exception("RandomException");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error in {Method}/Exception Caught", "Test");
                logger.LogError(ex, "Exception Caught");
            }
        }
    }
}
